{"version":3,"sources":["DrawingArea.jsx","App.js","reportWebVitals.js","index.js"],"names":["DrawingArea","onClearLines","clearLines","useState","lines","setLines","isDrawing","useRef","useEffect","className","width","height","onMouseDown","e","current","pos","target","getStage","getPointerPosition","points","x","y","onMousemove","point","lastLine","length","concat","splice","onMouseup","map","line","i","stroke","strokeWidth","tension","lineCap","globalCompositeOperation","tool","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAuEeA,EApEK,SAAC,GAAiC,EAA/BC,aAAgC,IAAlBC,EAAiB,EAAjBA,WAAiB,EAC1BC,mBAAS,IADiB,mBAC7CC,EAD6C,KACtCC,EADsC,KAE9CC,EAAYC,kBAAO,GAEzBC,qBAAU,cAEP,CAACN,IAiCJ,OACE,qBAAKO,UAAU,yBAAf,SACE,cAAC,IAAD,CACEC,MAAO,IACPC,OAAQ,IACRC,YApCkB,SAACC,GACvBP,EAAUQ,SAAU,EACpB,IAAMC,EAAMF,EAAEG,OAAOC,WAAWC,qBAChCb,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEe,OAAQ,CAACJ,EAAIK,EAAGL,EAAIM,QAkCtCC,YA/BkB,SAACT,GAEvB,GAAKP,EAAUQ,QAAf,CAGA,IACMS,EADQV,EAAEG,OAAOC,WACHC,qBAGhBM,EAAWpB,EAAMA,EAAMqB,OAAS,GAEhCD,IAEFA,EAASL,OAASK,EAASL,OAAOO,OAAO,CAACH,EAAMH,EAAGG,EAAMF,IAGzDjB,EAAMuB,OAAOvB,EAAMqB,OAAS,EAAG,EAAGD,GAClCnB,EAASD,EAAMsB,aAebE,UAXgB,WACpBtB,EAAUQ,SAAU,GAWhBL,UAAU,eANZ,SAOE,cAAC,IAAD,UACGL,EAAMyB,KAAI,SAACC,EAAMC,GAAP,OACT,cAAC,IAAD,CAEEZ,OAAQW,EAAKX,OACba,OAAO,UACPC,YAAa,EACbC,QAAS,GACTC,QAAQ,QACRC,yBACgB,WAAdN,EAAKO,KAAoB,kBAAoB,eAP1CN,aCxCJO,MAXf,WACE,OACE,qCACE,+CACA,qBAAK7B,UAAU,mBAAf,SACE,cAAC,EAAD,UCIO8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.babe550c.chunk.js","sourcesContent":["import { React, useEffect, useState, useRef } from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\n\nconst DrawingArea = ({ onClearLines, clearLines }) => {\n  const [lines, setLines] = useState([]);\n  const isDrawing = useRef(false);\n\n  useEffect(() => {\n    //loadImage();\n  }, [clearLines]);\n\n  const handleMouseDown = (e) => {\n    isDrawing.current = true;\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, { points: [pos.x, pos.y] }]);\n  };\n\n  const handleMouseMove = (e) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n\n    // To draw line\n    let lastLine = lines[lines.length - 1];\n\n    if (lastLine) {\n      // add point\n      lastLine.points = lastLine.points.concat([point.x, point.y]);\n\n      // replace last\n      lines.splice(lines.length - 1, 1, lastLine);\n      setLines(lines.concat());\n    }\n  };\n\n  const handleMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  return (\n    <div className=\" text-center text-dark\">\n      <Stage\n        width={600}\n        height={600}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        className=\"canvas-stage\">\n        <Layer>\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line.points}\n              stroke=\"#df4b26\"\n              strokeWidth={2}\n              tension={0.5}\n              lineCap=\"round\"\n              globalCompositeOperation={\n                line.tool === \"eraser\" ? \"destination-out\" : \"source-over\"\n              }\n            />\n          ))}\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default DrawingArea;\n","import \"./App.css\";\nimport DrawingArea from \"./DrawingArea\";\n\nfunction App() {\n  return (\n    <>\n      <h1> Drawing Area</h1>\n      <div className=\"App drawing-area\">\n        <DrawingArea />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}